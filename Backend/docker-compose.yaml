version: "3"
services:
#  redis0:
#    image: scalable2021/redis0
#    build:
#      context: .
#      dockerfile: ./DockerFile_Builders/Redis/Dockerfile-base
#      args:
#        PORT_CONFIG: 7000
#        PORT_BUS_CONFIG: 8100
#    network_mode: "host"

  server:
    image: scalable2021/backend_server
    build:
      context: .
      dockerfile: "./DockerFile_Builders/Server/Dockerfile"
    ports:
      - "8021:8080"


  rabbitmq_server: # login guest:guest
    image: rabbitmq:3-management
    ports:
      - "4369:4369"
      - "5671:5671"
      - "5672:5672"
      - "25672:25672"
      - "15671:15671"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 30s
      timeout: 10s
      retries: 5
  rabbitmq_queues:
    image: scalable2021/rabbitmq_queues
    depends_on:
      - "rabbitmq_server"
    links:
      - "rabbitmq_server"
    environment:
      - HOSTNAMERABBIT=rabbitmq_server
    
    build:
      context: .
      dockerfile: "DockerFile_Builders/RabbitMQ/Dockerfile"

  user_service:
    image: scalable2021/backend_user_service
    depends_on:
      - "rabbitmq_queues"
    links:
      - "rabbitmq_queues"
    build:
      context: .
      dockerfile: "DockerFile_Builders/Services/User/Dockerfile"
#
  moderator_service:
    image: scalable2021/backend_moderator_service
    depends_on:
      - "rabbitmq_queues"
    links:
      - "rabbitmq_queues"
    build:
      context: .
      dockerfile: "DockerFile_Builders/Services/Moderator/Dockerfile"
  user_to_user_service:
    image: scalable2021/backend_user_to_user_service
    depends_on:
      - "rabbitmq_queues"
    links:
      - "rabbitmq_queues"
    build:
      context: .
      dockerfile: "DockerFile_Builders/Services/UserToUser/Dockerfile"
  chat_service:
    image: scalable2021/backend_chat_service
    depends_on:
      - "rabbitmq_queues"
    links:
      - "rabbitmq_queues"
    build:
      context: .
      dockerfile: "DockerFile_Builders/Services/Chat/Dockerfile"


#  redis1:
#    image: scalable2021/redis1
#    build:
#      context: .
#      dockerfile: ./DockerFile_Builders/Redis/Dockerfile-base
#      args:
#        PORT_CONFIG: 7001
#        PORT_BUS_CONFIG: 8101
#    network_mode: "host"
#
#  redis2:
#    image: scalable2021/redis2
#    build:
#      context: .
#      dockerfile: ./DockerFile_Builders/Redis/Dockerfile-base
#      args:
#        PORT_CONFIG: 7002
#        PORT_BUS_CONFIG: 8102
#    network_mode: "host"
#
#  redis3:
#    image: scalable2021/redis3
#    build:
#      context: .
#      dockerfile: ./DockerFile_Builders/Redis/Dockerfile-base
#      args:
#        PORT_CONFIG: 7003
#        PORT_BUS_CONFIG: 8103
#    network_mode: "host"
#
#  redis4:
#    image: scalable2021/redis4
#    build:
#      context: .
#      dockerfile: ./DockerFile_Builders/Redis/Dockerfile-base
#      args:
#        PORT_CONFIG: 7004
#        PORT_BUS_CONFIG: 8104
#    network_mode: "host"
#
#  redis5:
#    image: scalable2021/redis5
#    build:
#      context: .
#      dockerfile: ./DockerFile_Builders/Redis/Dockerfile-base
#      args:
#        PORT_CONFIG: 7005
#        PORT_BUS_CONFIG: 8105
#    network_mode: "host"
#
#
#  redis-cluster:
#    tty: true
#    image: scalable2021/redis_cluster
#    build:
#      context: .
#      dockerfile: ./DockerFile_Builders/Redis/Dockerfile
#    #hostname: redis-server
#    depends_on:
#      - redis1
#      - redis2
#      - redis3
#      - redis4
#      - redis5
#    network_mode: "host"

  postgres_db_container:
      image: scalable2021/postgres
      build:
        context: .
        dockerfile: ./DockerFile_Builders/Postgres/Dockerfile
#      volumes:
#        - ./initDB.sql:/docker-entrypoint-initdb.d/initDB.sql
#      environment:
#        POSTGRES_PASSWORD: rootpassword
#      expose:
#        - "5432"
  arangodb_db_container:
    image: scalable2021/arangodb
    build:
      context: .
      dockerfile: DockerFile_Builders/ArangoDB/Dockerfile
    environment:
      ARANGO_ROOT_PASSWORD: rootpassword
      ARANGO_DB: tinderDB
      ARANGODB_USERNAME: root
      ARANGODB_PASSWORD: 
      ARANGODB_COL1: userData
      ARANGODB_COL2: chats
      ARANGODB_COL3: profileViews
      ARANGODB_COL4: notifications
    expose:
        - "8529"
    volumes:
      - arangodb_data_container:/var/lib/arangodb3
      - arangodb_apps_data_container:/var/lib/arangodb3-apps
    command: arangod

  minio1:
    image: minio/minio:RELEASE.2021-06-09T18-51-39Z
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2
    expose:
      - "9000"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio2:
    image: minio/minio:RELEASE.2021-06-09T18-51-39Z
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2
    expose:
      - "9000"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio3:
    image: minio/minio:RELEASE.2021-06-09T18-51-39Z
    hostname: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2
    expose:
      - "9000"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio4:
    image: minio/minio:RELEASE.2021-06-09T18-51-39Z
    hostname: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2
    expose:
      - "9000"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

## By default this config uses default local driver,
## For custom volumes replace with volume driver configuration.
  nginx:
    image: scalable2021/nginx
    build:
      context: .
      dockerfile: DockerFile_Builders/Nginx/Dockerfile
    hostname: nginx
    ports:
      - "9000:9000"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4
volumes:
  arangodb_data_container:
  arangodb_apps_data_container:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:

